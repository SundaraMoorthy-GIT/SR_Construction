import { Component, OnInit } from '@angular/core';
import { AppService } from 'src/app/app.service';
import { Observable } from 'rxjs';
import { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';
import { ConfirmationService } from 'primeng/api';
import { ToastrService } from 'ngx-toastr';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
declare let $: any;
@Component({
  selector: 'app-emi-loan-issue',
  templateUrl: './emi-loan-issue.component.html',
  styleUrls: ['./emi-loan-issue.component.scss']
})
export class EmiLoanIssueComponent implements OnInit {
  add: any = {};
  add1: any = {};

  public btndisable: boolean = false;



  

  constructor(public appservice: AppService, private toastr: ToastrService,private router: Router, private http: HttpClient) {
   this.appservice.get_Emi_Loan_Issue_Details();
   this.add.Pay_Mode=appservice.Cash_ID;
   this.add.Received_Bank="0";
    if (this.appservice.isEdit) {
      this.add = appservice.Edit_Row;

      try {
        this.add.Loan_Date = appservice.datefromat(this.appservice.Edit_Row.Loan_Date);
        this.add.Due_Start = appservice.datefromat(this.appservice.Edit_Row.Due_Start);
        this.add.Cheque_Date = appservice.datefromat(this.appservice.Edit_Row.Cheque_Date);


      } catch{ }
    }
    else {
      this.clear();
      this.add1.Join_Date = appservice.datefromat(this.add1.Join_Date);
      this.clear_Ledger();
      this.get_Loan_No()
      this.add.ID = "0";
      this.add1.ID = "0";

    }
    if (this.appservice.from_customer_page == true) {
      this.add.Phone_Number = this.appservice.Selected_Customer.Phone_Number;
      this.add.Ledger_ID = this.appservice.Selected_Customer.ID;
      this.add.Ledger_Name = this.appservice.Selected_Customer.Ledger_Name;
      this.add.Address1 = this.appservice.Selected_Customer.Address1;
      this.add.Address2 = this.appservice.Selected_Customer.Address2;
      this.add.Address3 = this.appservice.Selected_Customer.Address3;
      this.add.Area = this.appservice.Selected_Customer.Area;
      
      this.appservice.from_customer_page = false;
    }

  }
 
  get_Ledger(ID,name)
  {
 
    try{
    this.appservice.Selected_Customer = this.appservice.Ledger_Master_Rows.filter(e => e.ID == ID)[0];
  
    this.add.Ledger_ID = this.appservice.Selected_Customer.ID;
    this.add.Ledger_Name = this.appservice.Selected_Customer.Ledger_Name;

   
    }catch{

    }
  }
  clear_Ledger() {

    this.appservice.get_fields_of('Ledger_Master').forEach((activity) => {
      if (activity.Default_Value == "T_Date") {
        this.add1[activity.Field] = this.appservice.T_Date;
      }
      else {
        this.add1[activity.Field] = activity.Default_Value;
      }
    });
  }
  get_customers() {
    this.appservice.Ledger_Type = "1";
    return this.router.navigate(['/cutomer-search']);

  }
  get_Loan_No() {
    this.appservice.getc("Api/Collection_/get_EMI_Loan_No").subscribe(( res: any) => {
      this.add.Loan_No=res;
    });
  }
  clear() {

    this.appservice.get_fields_of('EMI_Loan_Issue').forEach((activity) => {
      if (activity.Default_Value == "T_Date") {
        this.add[activity.Field] = this.appservice.T_Date;
      }
      else {
        this.add[activity.Field] = activity.Default_Value;
      }
    });
  }
 
Calc_Per_Due_Amount()
{
  this.add.Per_Due_Amount =(parseFloat(this.add.Collectable)/parseFloat(this.add.No_of_Due)).toFixed(2);


}
Calc_Sum(){
    this.add.Collectable =(Math.round(parseFloat(this.add.Loan_Amount)/100*parseFloat(this.add.Collected_Per)+parseFloat(this.add.Loan_Amount))).toFixed(2);

}
Calc_Collected_Per()
{
  this.add.Collected_Per=(((parseFloat(this.add.Collectable)-parseFloat(this.add.Loan_Amount))/parseFloat(this.add.Loan_Amount))*100).toFixed(2);
}

Close_Customer_Module1()
{
  $('#Customer_Module2').modal('hide');
}

Open_Customer_Module1()
{

  $('#Customer_Module2').modal('show');
  
}
  Valid;
 
  add_Ledger(f) {




    this.Valid = true;
    this.appservice.get_fields_of('Ledger_Master').filter(e => String(e.Validate).toLocaleLowerCase() == "true").forEach((data) => {

      if (this.add1[data.Field] == "") {
        this.Valid = false;
        return;
      }

    });
    this.add1.Company = this.appservice.Company;
    this.add1.Company_ID = this.appservice.Company;
    this.add1.Created_by = this.appservice.CREATED_BY;
    this.add1.Phone_Number = this.add1.Phone_Number;
    try{
      if(this.add1.Phone_Number.length!=10)
      {
      this.toastr.error("Phone No Should be 10 Digits", "Error", { timeOut: 3000 });
      return;
      }

    }catch{}
    this.add1.Table_Name = "Ledger_Master";
    if (this.Valid) {
      alert(this.Valid)
      this.btndisable = true;

      this.http.post(this.appservice.Server_URL + 'api/Master/Post_Ledger', this.add1, { headers: this.appservice.headers })
        .subscribe(
          
          (val: string) => {
            this.btndisable = false;

            if (val == "True") {
              this.toastr.success("Details Salved Success", 'Msg');
              this.appservice.isEdit = false;
              this.appservice.get_Ledger_Master();
              this.clear_Ledger();
              this.Close_Customer_Module1();
            }
            else {
              this.toastr.error(val, "Error", { timeOut: 3000 });
            }
          },
          response => {
            this.toastr.error('Error ', response, {
              timeOut: 3000
            });

          });

    }
  }
  addData(f) {

    this.Valid = true;
    this.appservice.get_fields_of('EMI_Loan_Issue').filter(e => String(e.Validate).toLocaleLowerCase() == "true").forEach((data) => {

      if (this.add[data.Field] == "") {
        this.Valid = false;
        return;
      }

    });

    this.add.Company = this.appservice.Company;
    this.add.Company_ID = this.appservice.Company;
    this.add.Created_by = this.appservice.CREATED_BY;
    this.add.No_of_Due = this.add.No_of_Due;

    this.add.Table_Name = "EMI_Loan_Issue";
    if (this.Valid) {
      this.btndisable = true;

      this.http.post(this.appservice.Server_URL + 'api/Collection_/Post_EMI_Loan_Details', this.add, { headers: this.appservice.headers })
        .subscribe(
          (val: string) => {
            this.btndisable = false;
            

            if (JSON.parse(val)[0]["status"] == "True") {
              this.toastr.success("Details Salved Success", 'Msg');
              this.appservice.get_EMI_Loan_Issue_Billsout(this.add.Loan_No);
              this.add.ID=JSON.parse(val)[0]["ID"];
              this.appservice.isEdit = false;
              this.appservice.get_Emi_Loan_Issue_Details();

            }
            else {
              this.toastr.error(JSON.parse(val)[0]["status"], "Error", { timeOut: 3000 });
            }
          },
          response => {
            this.toastr.error('Error ', response, {
              timeOut: 3000
            });

          });

    }
  }
  ngOnInit(): void {
  }

}
